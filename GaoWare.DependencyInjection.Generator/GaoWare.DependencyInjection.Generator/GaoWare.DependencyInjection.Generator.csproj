<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <IsPackable>true</IsPackable>
        <Nullable>enable</Nullable>
        <LangVersion>latest</LangVersion>

        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <IsRoslynComponent>true</IsRoslynComponent>

        <RootNamespace>GaoWare.DependencyInjection.Generator</RootNamespace>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
        <FileVersion>0.1.0</FileVersion>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <Description>Generates the register function for dependency injection to register all services with interfaces. Registering only classes and interfaces with a specific attribute</Description>
        <Version>0.0.2</Version>
        <Title>GaoWare DependencyInjection Generator</Title>
        <Copyright>GaoWare 2024</Copyright>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.11.0">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.11.0"/>
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="[6.0.0,)" ExcludeAssets="true"  />

        <!-- Package the generator in the analyzer directory of the nuget package -->
        <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    </ItemGroup>


</Project>
